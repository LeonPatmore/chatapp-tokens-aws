Transform: AWS::Serverless-2016-10-31
Description: Chatapp Tokens serverless template.
Parameters:
  RenewStateMachineName:
    Type: String
    Default: ChatappTokensRenew
    Description: The name of the renew state machine.
  ChatappTokensTableName:
    Type: String
    Default: ChatappTokens
    Description: The name of the table for Chatapp Tokens.
Globals:
  Function:
    Timeout: 20
    MemorySize: 640
    Environment:
      Variables:
        CONFIG_PARAM_KEY: "/chatapp-tokens/dev/encrypted"
        TABLE_NAME: !Ref ChatappTokensTable
        DB_ENDPOINT_OVERRIDE: ""
        OVERRIDE_DB_ENDPOINT: "false"
        RENEW_STATE_MACHINE: !Sub
          - "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${RenewStateMachineName}"
          - RenewStateMachineName: !Ref RenewStateMachineName
Resources:

  GetTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      KmsKeyArn: !GetAtt ParameterStoreEncryptionKey.Arn
      CodeUri: build/jars/chatapp-tokens-all.jar
      Runtime: java8
      Handler: com.chatapp.tokens.handlers.get.GetHandler
      Role: !GetAtt ParameterStoreDynamoDBRole.Arn
      Events:
        GetToken:
          Type: Api
          Properties:
            Path: /{provider}/{externalId}
            Method: get

  CreateTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      KmsKeyArn: !GetAtt ParameterStoreEncryptionKey.Arn
      CodeUri: build/jars/chatapp-tokens-all.jar
      Runtime: java8
      Handler: com.chatapp.tokens.handlers.create.CreateHandler
      Role: !GetAtt ParameterStoreDynamoDBRole.Arn
      Events:
        CreateToken:
          Type: Api
          Properties:
            Path: /create/{provider}
            Method: post

  RenewTokenFunctionAPI:
    Type: AWS::Serverless::Function
    Properties:
      KmsKeyArn: !GetAtt ParameterStoreEncryptionKey.Arn
      CodeUri: build/jars/chatapp-tokens-all.jar
      Runtime: java8
      Handler: com.chatapp.tokens.handlers.renew.RenewHandlerAPI
      Role: !GetAtt ParameterStoreDynamoDBRole.Arn
      Events:
        RenewTokenAPI:
          Type: Api
          Properties:
            Path: /renew/{provider}/{externalId}
            Method: post

  RenewTokenFunctionStateMachine:
    Type: AWS::Serverless::Function
    Properties:
      KmsKeyArn: !GetAtt ParameterStoreEncryptionKey.Arn
      CodeUri: build/jars/chatapp-tokens-all.jar
      Runtime: java8
      Handler: com.chatapp.tokens.handlers.renew.RenewHandlerStateMachine
      Role: !GetAtt ParameterStoreDynamoDBRole.Arn

  ParameterStoreDynamoDBRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'lambda.amazonaws.com'
            - 'states.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
      - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
      Policies:
      - PolicyName: 'ParameterStoreChatappTokensDev'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ssm:GetParameter*'
            Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/chatapp-tokens/dev*'
      - PolicyName: 'LambdaInvoke'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - "lambda:InvokeAsync"
            - "lambda:InvokeFunction"
            Resource: "*"
      - PolicyName: 'StateMachineStartExecution'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
            - "states:StartExecution"
            Resource: "*"

  ParameterStoreEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: 'alias/chatapp-tokens/dev'
      TargetKeyId: !Ref ParameterStoreEncryptionKey

  ParameterStoreEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Enabled: True
      EnableKeyRotation: True
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
        - Sid: 'Allow administration of the key'
          Effect: Allow
          Principal:
            AWS:
            - !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action:
          - 'kms:*'
          Resource: '*'
        - Sid: 'Allow use of the key'
          Effect: Allow
          Principal:
            AWS: !GetAtt ParameterStoreDynamoDBRole.Arn
          Action:
          - 'kms:Encrypt'
          - 'kms:Decrypt'
          - 'kms:ReEncrypt*'
          - 'kms:GenerateDataKey*'
          - 'kms:DescribeKey'
          Resource: '*'

  ChatappTokensTable:
    Type: AWS::Serverless::SimpleTable
    TableName: !Ref ChatappTokensTableName
    PrimaryKey:
      Name: id
      Type: String
    ProvisionedThroughput:
      ReadCapacityUnit: 5
      WriteCapacityUnits: 5

  ChatappTokensRenewStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub
        - "{ \"Comment\": \"An example of the Amazon States Language using wait states\", \"StartAt\": \"Wait\", \"States\": { \"Wait\": { \"Type\": \"Wait\", \"SecondsPath\": \"$.waitSeconds\", \"Next\": \"InvokeRenew\" }, \"InvokeRenew\": { \"Type\": \"Task\", \"Resource\": \"${RenewFunctionArn}\", \"Parameters\": { \"Payload\": { \"externalId.$\": \"$.externalId\", \"provider.$\": \"$.provider\" } }, \"End\": true } } }"
        - RenewFunctionArn: !GetAtt RenewTokenFunctionStateMachine.Arn
      RoleArn: !GetAtt ParameterStoreDynamoDBRole.Arn
      StateMachineName: !Ref RenewStateMachineName
      StateMachineType: STANDARD
